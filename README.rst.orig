
Invoke your personal API token / flow token as a string.
The personal API token comes from your `account page <https://www.flowdock.com/account/tokens>`_,
and flow token is generated during adding as integration source onto a flow,

You can use `get_uid` to check their user ID as well.

>>> client.get_uid('Ray_')
336968
>>> ray = client(336968)


Operate with private message / flow
-----------------------------------

First of all, you have to invoke your personal API token which comes from your
`account page <https://www.flowdock.com/account/tokens>`_.
In addition, you have to declare your organization name.

.. doctest:

    >>> from tests.tokens import PERSONAL_API_TOKEN

>>> import flowdock
>>> client = flowdock.connect(token=PERSONAL_API_TOKEN, org='hpe')

To operate with a flow, simply provide flow name.

>>> myflow = client(flow='apua-flow')
>>> msg_id = myflow.send('The message content')
>>> myflow.show(msg_id)['content']
'The message content'

To operate with a private message, provide the target user ID or
`display name <https://www.flowdock.com/account/edit>`_.

>>> ray = client(user='Ray_')
>>> msg_id = ray.send('The private message content')
>>> ray.show(msg_id)['content']
'The private message content'

For convenience, you can provide information in one line.

>>> import flowdock
>>> myflow = flowdock.connect(token=PERSONAL_API_TOKEN, org='hpe', flow='apua-flow')
>>> ray = flowdock.connect(token=PERSONAL_API_TOKEN, org='hpe', user='Ray_')


Send and edit private message
-----------------------------

>>> msg_id = ray.send('orig_content')
>>> ray.show(msg_id)['content']
'orig_content'
>>> ray.edit(msg_id, 'edited_content')
>>> ray.show(msg_id)['content']
'edited_content'
>>> ray.delete(msg_id)  # i.e. edit it as empty
>>> msg_id = ray.send('orig_content')

>>> msgs = ray.list(limit=30)
>>> msgs = ray.list(search="keyword1 keyword2 ...", skip=10)
>>> msgs = ray.list(tags=['a','b'],tag_mode='and')  # tag_mode := and | or

Send and edit flow message
--------------------------

>>> msg_id = myflow.send('orig_content')
>>> myflow.show(msg_id)['content']
'orig_content'
>>> myflow.edit(msg_id, 'edited_content')
>>> myflow.edit(msg_id, tags=['A______A'])
>>> myflow.show(msg_id)['content']
'edited_content'
>>> myflow.delete(msg_id)

>>> msg_id = myflow.send('@Ray_, content with tags', tags=['haha'])
>>> assert 'haha' in myflow.show(msg_id)['tags']
>>> myflow.edit(msg_id, tags=['nono'])
>>> assert 'haha' in myflow.show(msg_id)['tags']
>>> myflow.edit(msg_id, tags=['yes'], override_tags=True)
>>> assert 'haha' not in myflow.show(msg_id)['tags']
>>> myflow.delete(msg_id)

>>> msgs = myflow.list(limit=30)
>>> msgs = myflow.list(search="keyword1 keyword2 ...", skip=10)
>>> msgs = myflow.list(tags=['a','b'],tag_mode='and')  # tag_mode := and | or
>>> msgs = myflow.list(events='message')  # events := message | discussion | activity | file | status

Listen flow events
------------------

::
    for event in myflow.events():
        print(event.data)

>>> for i, event in enumerate(myflow.events()):
...     if i > 2:
...         break
