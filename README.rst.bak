:Note: https://hackmd.io/s/rJAPuzLxN


Flow / private send message
------------------------------

.. prerequisite -- invoke tokens

    >>> from test_tokens import PERSONAL_API_TOKEN

>>> import flowdock
>>> myflow = flowdock.connect(token=PERSONAL_API_TOKEN, org='hpe', flow='apua-flow')

.. clean up

    >>> for m in myflow.list():
    ...     if m['content']:
    ...         myflow.delete(m['id'])

>>> ray = flowdock.connect(token=PERSONAL_API_TOKEN, org='hpe', user='Ray_')

..  >>> msg_id = myflow.send('Message')
..  >>> myflow.show(msg_id)['content']
..  'Message'

..  >>> msg_id = ray.send('Private message')
..  >>> ray.show(msg_id)['content']
..  'Private message'


Edit and delete messages
-----------------------------

..  >>> msg_id = myflow.send('Origin message')
..  >>> myflow.show(msg_id)['content']
..  'Origin message'
..  >>> myflow.edit(msg_id, 'Edited message')
..  >>> myflow.show(msg_id)['content']
..  'Edited message'
..  >>> myflow.delete(msg_id)  # i.e. edit it as empty
..
..  >>> msg_id = ray.send('Origin private message')
..  >>> ray.show(msg_id)['content']
..  'Origin private message'
..  >>> ray.edit(msg_id, 'Edited private message')
..  >>> ray.show(msg_id)['content']
..  'Edited private message'
..  >>> ray.delete(msg_id)  # i.e. edit it as empty

..  .. handle exceptions of wrong arguments
..
..      >>> myflow.edit(0)
..      Traceback (most recent call last):
..          ...
..      TypeError: at least edit `content` or `tags`
..
..      >>> ray.edit(0)
..      Traceback (most recent call last):
..          ...
..      TypeError: edit() missing 1 required positional argument: 'content'


Tag message
==============================

- seems like hash tags only allow [0-9a-z_] and unicode

..  >>> msg_id = myflow.send('@team, annoucenment below', tags=['important'])
..  >>> myflow.show(msg_id)['tags']  # some additional tags inside
..  ['important', ':user:team']
..  >>> myflow.edit(msg_id, tags=['announcement'])  # add a tag
..  >>> myflow.show(msg_id)['tags']  # some additional tags inside
..  ['important', ':user:team', 'announcement']
..  >>> myflow.edit(msg_id, tags=['announcement'], override_tags=True)  # override tags
..  >>> myflow.show(msg_id)['tags']  # some additional tags inside
..  [':user:team', 'announcement']


List message
==============================

- list message, by default, 30 messages

..  >>> myflow.list()
..  (last 30 messages)

- the result is always in ascending order by message ID, not lasted update (edited)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Support parameters:

- search x tags x tags_mode x skip x limit
- event x sort x since_id x until_id x limit

.. handle exceptions of wrong arguments

    ..  >>> myflow.list(no_support_key=123)
    ..  Traceback (most recent call last):
    ..      ...
    ..  ValueError: ???

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

→ search x tags x tags_mode x skip x limit

- search by case insensitive keywords

..  >>> for c in 'aa', 'AA', 'bb', 'aa bb':
..  ...     _ = myflow.send(c)
..  >>> [m['content'] for m in myflow.list(search='aa bb')]
..  ['aa', 'AA', 'bb', 'aa bb']

- search by tags and tag_mode `and | or`

..  >>> for c, ts in ('aa',['aa']), ('bb',['bb']), ('aa+bb',['aa','bb']), ('aatbb',['aa\tbb']):
..  ...     _ = myflow.send(c, tags=ts)
..  >>> [m['content'] for m in myflow.list(tags=['aa', 'bb'])]
..  ['aa+bb']
..  >>> [m['content'] for m in myflow.list(tags=['aa', 'bb'], tag_mode='and')]
..  ['aa+bb']
..  >>> [m['content'] for m in myflow.list(tags=['aa', 'bb', 'aa\tbb'], tag_mode='or')]
..  ['aa', 'bb', 'aa+bb', 'aatbb']

.. handle exceptions of wrong tags

..      >>> myflow.list(tags=['a a'])
..      Traceback (most recent call last):
..          ...
..      ValueError: Tag cannot contain whitespace
..
..      >>> myflow.list(tag_mode='xxx')
..      Traceback (most recent call last):
..          ...
..      ValueError: Tag mode should be "and" / "or"

- note that it search by each unicode charactor

..  >>> for c in ['重', '重要', '不重要']:
..  ...     _ = myflow.send(c)
..  >>> [m['content'] for m in myflow.list(search='重')]
..  ['重', '重要', '不重要']

- skip newest N results. Not useful

- search with limit of result in descending order; default is 30

..  >>> msg_ids = [myflow.send('...') for _ in range(3)]
..  >>> len(myflow.list(search='...', limit=2))
..  2

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

→ event x sort x since_id x until_id x limit

.. >>> msg_ids = [myflow.send('...') for _ in range(3)]
.. >>> _ = myflow.send('xxx')
.. >>> _ = list(map(myflow.show, msg_ids))
.. >>> A = myflow.list(search='...', skip=1)
.. >>> A = myflow.list(sort='asc', limit=3)
.. >>> B = myflow.list(sort='asc', limit=3, skip=1)
.. >>> #D = myflow.list(search='...', skip=1, sort='asc')
.. >>> #B = myflow.list(until_id=msg_ids[1])
.. >>> C = myflow.list(since_id=msg_ids[1])
.. >>> D = myflow.list(since_id=msg_ids[1], search='...')
.. >>> msg_ids, [m['id'] for m in A], [m['id'] for m in B], [m['id'] for m in C], [m['id'] for m in D]

..  >>> msgs = myflow.list(event='message')  # events := message | discussion | activity | file | status

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

List files / links / Email

...

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Private message has no search bar, but still can search


Files
==============================


Monitor flow
==============================

.. how about using coroutine to run test?

::

    for event in myflow.events():
        D = json.loads(event.data)
        if D['event'] == 'activity.user':
            pass
        elif D['event'] == 'message':
            print(D['content'])


Present integration message
==============================

>>> addon = connect(flow_token='...')
>>> addon.???
>>> addon.???
>>> addon.???
>>> addon.???
>>> addon = connect(flow_token='...', org='...', flow='...')
>>> addon.???
>>> addon.???
>>> addon.???
>>> addon.???
>>> addon  # more support


